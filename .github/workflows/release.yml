name: 'Release'

on:
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
      - '.github/**'
      - '!.github/workflows/release.yml'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force release build for current version'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
      version_type:
        description: 'Version bump type (if forcing)'
        required: false
        default: 'patch'
        type: choice
        options:
          - 'patch'
          - 'minor'
          - 'major'

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # Job 1: Determine version bump and create new version
  version:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.version-check.outputs.should-release }}
      new-version: ${{ steps.version-check.outputs.new-version }}
      version-type: ${{ steps.version-check.outputs.version-type }}
      old-version: ${{ steps.version-check.outputs.old-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version bump and calculate new version
        id: version-check
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Get current version from tauri.conf.json
          CURRENT_VERSION=$(grep '"version"' src-tauri/tauri.conf.json | head -1 | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "Current version in config: $CURRENT_VERSION"
          
          # Remove 'v' prefix from tag for comparison
          TAG_VERSION=${LATEST_TAG#v}
          echo "Tag version: $TAG_VERSION"
          
          # Check if this is a forced release
          if [ "${{ github.event.inputs.force_release }}" = "true" ]; then
            echo "Force release requested"
            
            # For forced release, use the manual version type input
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            
            # Parse current version
            IFS='.' read -ra VERSION_PARTS <<< "$TAG_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            # Bump based on type
            case "$VERSION_TYPE" in
              "major")
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              "minor")
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              "patch")
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "Forced release - new version: $NEW_VERSION"
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "version-type=$VERSION_TYPE" >> $GITHUB_OUTPUT
            echo "old-version=$TAG_VERSION" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # If version in config is already different from tag, use that
          if [ "$CURRENT_VERSION" != "$TAG_VERSION" ]; then
            echo "Version already bumped in config: $TAG_VERSION -> $CURRENT_VERSION"
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "new-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "old-version=$TAG_VERSION" >> $GITHUB_OUTPUT
            
            # Determine version type from the change
            IFS='.' read -ra CURRENT <<< "$CURRENT_VERSION"
            IFS='.' read -ra PREVIOUS <<< "$TAG_VERSION"
            
            if [ "${CURRENT[0]}" -gt "${PREVIOUS[0]}" ]; then
              echo "version-type=major" >> $GITHUB_OUTPUT
            elif [ "${CURRENT[1]}" -gt "${PREVIOUS[1]}" ]; then
              echo "version-type=minor" >> $GITHUB_OUTPUT
            else
              echo "version-type=patch" >> $GITHUB_OUTPUT
            fi
            exit 0
          fi
          
          # Auto-detect version bump type from commit messages since last tag
          echo "Analyzing commits since $LATEST_TAG to determine version bump..."
          
          # Get commits since last tag
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s" HEAD)
          else
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")
          fi
          
          # Check for breaking changes (major version)
          if echo "$COMMITS" | grep -qiE "^(BREAKING CHANGE|.*!:)"; then
            VERSION_TYPE="major"
            echo "Found breaking changes - major version bump"
          # Check for features (minor version)
          elif echo "$COMMITS" | grep -qiE "^(feat|feature):"; then
            VERSION_TYPE="minor"
            echo "Found new features - minor version bump"
          # Default to patch for fixes and other changes
          elif echo "$COMMITS" | grep -qiE "^(fix|bugfix|patch|chore|docs|style|refactor|perf|test):"; then
            VERSION_TYPE="patch"
            echo "Found fixes/changes - patch version bump"
          else
            echo "No conventional commits found, checking for significant changes..."
            # Check if there are actual code changes
            CHANGED_FILES=$(git diff --name-only ${LATEST_TAG}..HEAD | grep -v "^README\|^docs/\|^\.github/" || true)
            if [ -z "$CHANGED_FILES" ]; then
              echo "No significant changes detected - skipping release"
              echo "should-release=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            VERSION_TYPE="patch"
            echo "Significant changes found - defaulting to patch version bump"
          fi
          
          # Parse current version and bump it
          IFS='.' read -ra VERSION_PARTS <<< "$TAG_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case "$VERSION_TYPE" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "Calculated new version: $NEW_VERSION (type: $VERSION_TYPE)"
          
          echo "should-release=true" >> $GITHUB_OUTPUT
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version-type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "old-version=$TAG_VERSION" >> $GITHUB_OUTPUT

      - name: Update version files
        if: steps.version-check.outputs.should-release == 'true'
        run: |
          NEW_VERSION="${{ steps.version-check.outputs.new-version }}"
          
          echo "Updating version to $NEW_VERSION in configuration files..."
          
          # Update tauri.conf.json
          sed -i 's/"version": "[^"]*"/"version": "'$NEW_VERSION'"/' src-tauri/tauri.conf.json
          
          # Update Cargo.toml
          sed -i 's/^version = "[^"]*"/version = "'$NEW_VERSION'"/' src-tauri/Cargo.toml
          
          # Update Cargo.lock
          cd src-tauri
          cargo update -p todo-notes-tracker
          cd ..
          
          echo "Version files updated successfully"

      - name: Commit version bump
        if: steps.version-check.outputs.should-release == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add src-tauri/tauri.conf.json src-tauri/Cargo.toml src-tauri/Cargo.lock
          git commit -m "ðŸ”– chore(release): bump version to v${{ steps.version-check.outputs.new-version }}

Auto-generated version bump: ${{ steps.version-check.outputs.old-version }} â†’ ${{ steps.version-check.outputs.new-version }}
Type: ${{ steps.version-check.outputs.version-type }}

[skip ci]"
          git push origin main

  # Job 2: Build and release if version changed
  release:
    needs: version
    if: needs.version.outputs.should-release == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            target: 'x86_64-apple-darwin'
            arch: 'x64'
            rust-target: 'x86_64-apple-darwin'
          - platform: 'macos-latest' 
            target: 'aarch64-apple-darwin'
            arch: 'arm64'
            rust-target: 'aarch64-apple-darwin'
          - platform: 'ubuntu-20.04'
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x64'
            rust-target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'
            rust-target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main  # Fetch the updated version

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}

      - name: Add Rust target
        run: rustup target add ${{ matrix.rust-target }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies (Ubuntu)
        if: contains(matrix.platform, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-${{ matrix.arch }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-cargo-

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0" --locked

      - name: Build Tauri app
        run: |
          cd src-tauri
          cargo tauri build --target ${{ matrix.rust-target }}

      - name: Prepare artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          mkdir -p artifacts
          # Find and copy .app bundle (handles naming variations)
          find "src-tauri/target/${{ matrix.rust-target }}/release/bundle/macos" -name "*.app" -exec cp -r {} artifacts/ \;
          # Copy DMG files if they exist
          find "src-tauri/target/${{ matrix.rust-target }}/release/bundle/dmg" -name "*.dmg" -exec cp {} artifacts/ \; 2>/dev/null || true
          # List what we found for debugging
          echo "Generated artifacts:"
          ls -la artifacts/

      - name: Prepare artifacts (Linux)
        if: contains(matrix.platform, 'ubuntu')
        run: |
          mkdir -p artifacts
          # Copy AppImage if it exists
          find "src-tauri/target/${{ matrix.rust-target }}/release/bundle/appimage" -name "*.AppImage" -exec cp {} artifacts/ \; 2>/dev/null || true
          # Copy deb package if it exists
          find "src-tauri/target/${{ matrix.rust-target }}/release/bundle/deb" -name "*.deb" -exec cp {} artifacts/ \; 2>/dev/null || true
          # Copy the binary
          cp "src-tauri/target/${{ matrix.rust-target }}/release/todo-notes-tracker" artifacts/ 2>/dev/null || true
          # List what we found for debugging
          echo "Generated artifacts:"
          ls -la artifacts/

      - name: Prepare artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          mkdir artifacts
          # Copy MSI installer if it exists
          if (Test-Path "src-tauri/target/${{ matrix.rust-target }}/release/bundle/msi/*.msi") {
            Copy-Item "src-tauri/target/${{ matrix.rust-target }}/release/bundle/msi/*.msi" artifacts/
          }
          # Copy executable
          Copy-Item "src-tauri/target/${{ matrix.rust-target }}/release/todo-notes-tracker.exe" artifacts/
          # List what we found for debugging
          Write-Output "Generated artifacts:"
          Get-ChildItem artifacts/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: todo-notes-tracker-${{ matrix.target }}
          path: artifacts/*
          retention-days: 30

  # Job 3: Create GitHub release with all artifacts
  create-release:
    needs: [version, release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main  # Fetch the updated version

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Generate release notes
        id: release-notes
        run: |
          # Get commits since last tag
          LATEST_TAG="v${{ needs.version.outputs.old-version }}"
          if [ "$LATEST_TAG" != "v" ] && git rev-parse "$LATEST_TAG" >/dev/null 2>&1; then
            COMMITS=$(git log ${LATEST_TAG}..HEAD --oneline --pretty=format:"- %s" | head -20)
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s" | head -10)
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          # Todo Notes Tracker v${{ needs.version.outputs.new-version }}
          
          A ${{ needs.version.outputs.version-type }} release with new features and improvements.
          
          ## What's Changed
          $COMMITS
          
          ## Download
          Choose the appropriate package for your platform:
          
          - **macOS**: Download the \`.dmg\` file or \`.app\` bundle
          - **Windows**: Download the \`.msi\` installer or \`.exe\` file  
          - **Linux**: Download the \`.AppImage\` or \`.deb\` package
          
          ## Installation
          
          ### macOS
          1. Download the DMG file
          2. Open it and drag Todo Notes Tracker to Applications
          3. Launch from Applications folder
          
          ### Windows  
          1. Download the MSI installer
          2. Run the installer and follow the prompts
          3. Launch from Start Menu or Desktop shortcut
          
          ### Linux
          1. Download the AppImage file
          2. Make it executable: \`chmod +x Todo-Notes-Tracker*.AppImage\`
          3. Run the AppImage file
          
          Or install the DEB package: \`sudo dpkg -i todo-notes-tracker*.deb\`
          
          ## Features
          - âœ… Daily todo management with bullet journal symbols
          - âœ… Calendar view with event planning
          - âœ… Notes section for daily thoughts
          - âœ… Pomodoro timer with notifications
          - âœ… Text zoom for accessibility
          - âœ… Data persistence and cross-platform support
          - âœ… Resizable panels for customized workspace
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LATEST_TAG...v${{ needs.version.outputs.new-version }}
          EOF

      - name: Create release tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if tag already exists locally and remotely
          TAG_NAME="v${{ needs.version.outputs.new-version }}"
          
          # Delete local tag if it exists
          git tag -d "$TAG_NAME" 2>/dev/null || true
          
          # Delete remote tag if it exists
          git push --delete origin "$TAG_NAME" 2>/dev/null || true
          
          # Create new tag
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin "$TAG_NAME"

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.version.outputs.new-version }}
          name: Todo Notes Tracker v${{ needs.version.outputs.new-version }}
          bodyFile: release_notes.md
          artifacts: "release-artifacts/**/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false
          generateReleaseNotes: false
# Continuous Integration Tests for Todo Notes Tracker

name: Tests

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test-rust:
    name: Test Rust Backend
    runs-on: ubuntu-latest
    container:
        image: ivangabriele/tauri:debian-bookworm-22
    steps:
        - uses: actions/checkout@v4
        
        - name: Rust Cache
          uses: Swatinem/rust-cache@v2
          with:
            workspaces: "src-tauri -> target"
            shared-key: "rust-cache"
            
        - name: Add Rust format
          run: rustup component add rustfmt

        - name: Add clippy
          run: rustup component add clippy

        - name: Run Rust tests
          working-directory: src-tauri
          env:
            DISPLAY: ":99"
            TAURI_SKIP_ICON_GENERATION: "true"
            CI: "true"
          run: |
            export DISPLAY=:99
            Xvfb :99 -screen 0 1024x768x24 &
            sleep 3
            cargo test --verbose
          
        - name: Check Rust formatting
          working-directory: src-tauri
          env:
            TAURI_SKIP_ICON_GENERATION: "true"
            CI: "true"
          run: cargo fmt --check
          
        - name: Run Rust linter
          working-directory: src-tauri
          env:
            TAURI_SKIP_ICON_GENERATION: "true"
            CI: "true"
          run: cargo clippy --tests -- -W clippy::all -A clippy::too_many_arguments

  test-javascript:
    name: Test JavaScript Frontend
    runs-on: ubuntu-latest
    container: 
        image: ivangabriele/tauri:debian-bookworm-22
    
    steps:
        - uses: actions/checkout@v4
        
        - name: Check JavaScript syntax
          run: |
            for file in ui/*.js; do
              echo "Checking $file"
              node -c "$file"
            done
            
        - name: Check HTML files
          run: |
            # Basic HTML validation - check for proper structure
            for file in ui/*.html; do
              echo "Checking $file"
              # Check for basic HTML structure
              grep -q "<!DOCTYPE html>" "$file" || (echo "Missing DOCTYPE in $file" && exit 1)
              grep -q "<html" "$file" || (echo "Missing html tag in $file" && exit 1)
              grep -q "</html>" "$file" || (echo "Missing closing html tag in $file" && exit 1)
            done
